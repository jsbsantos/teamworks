@using Teamworks.Web.Helpers.Mvc
@model Teamworks.Web.Controllers.Mvc.ProjectViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>
    <ul class="breadcrumb">
        <li>
            <a href="@Url.RouteUrl("default", new {controller = "Projects"})">Projects</a>
            <span class="divider">/</span>
        </li>
        <li>
            <span data-bind="text: summary.name">@Model.Summary.Name</span>
        </li>
    </ul>
</div>
<div class="row">
    <div class="span9">
        <header class="page-header">
            <h1>
                <span data-bind="text: summary.name">@Model.Summary.Name</span>
                <small>
                    <span data-bind="text: summary.description, visible: summary.description">
                        @Model.Summary.Description
                    </span>
                    <i class="icon-edit"></i> 
                </small>
            </h1>
        </header>
        <!-- Activities -->
        <section>
            <div class="page-header">
                <h2>Activities 
                    <small>
                        <a class="hide btn-mini" data-bind="css: { hide: activities.editing()}, click: function() { activities.editing(true); }">
                            One more activity
                        </a>
                    </small>
                </h2>
                <div class="hide" data-bind="css: { hide: !activities.editing() }">
                    <form class="well form-inline" data-bind="submit: activities._create">
                        <input id="activity_name" name="activity_name" class="span4" autofocus="autofocus" placeholder="Activity name" data-bind="value: activities.input, valueUpdate: 'afterkeyup'" />
                        <button type="submit" class="btn btn-success">
                            Create
                        </button>  
                        <a class="btn-mini" data-bind="click: function() { activities.editing(false) }"><i class="icon-remove"></i></a>                                     </form>
                </div>
            </div>
            <!-- ko template: { name: 'activities-template', foreach: activities } -->
            <!-- /ko -->
            
        </section>
        <section>
            <div class="page-header">
                <h2>Discussion
                    <small>
                        <a class="hide btn-mini" data-bind="css: { hide: discussions.editing()}, click: function() { discussions.editing(true); }">One more discussion</a>
                    </small>
                </h2>
                <div class="hide" data-bind="css: { hide: !discussions.editing() }">
                    <form class="well form-inline" data-bind="submit: discussions._create">
                        <input id="discussion_name" name="discussion_name" class="span4" autofocus="autofocus" placeholder="Discussion name" data-bind="value: discussions.input, valueUpdate: 'afterkeyup'" />
                        <button type="submit" class="btn btn-success">Create</button>  
                        <a class="btn-mini" data-bind="click: function() { discussions.editing(false) }"><i class="icon-remove"></i></a>                   
                    </form>
                </div>
            </div>
            <!-- ko template: { name: 'discussion-template', foreach: discussions } -->
            <!-- /ko -->
            
        </section>
    </div>
</div>
<script type="text/html" id="activities-template">
    <div>
        <button class="close" data-bind="click: _remove">&times;</button>
        <h3>
            <a data-bind="attr: { href: '@Url.RouteUrl("activities", new {project = Model.Summary.Id})/' + id() }">
                <span data-bind="text: name"></span>
                <small data-bind="text: description"></small>
            </a>
        </h3>
    </div>
</script>
<script type="text/html" id="discussion-template">
    <div>
        <button class="close" data-bind="click: _remove">&times;</button>
        <h3>
            <a data-bind="text: name, attr: { href: '@Url.RouteUrl("discussions", new {project = Model.Summary.Id})/' + id() }"></a>
        </h3>
        <p data-bind="text: content"></p>
    </div>
</script>
<script>
    var viewmodel = function() {
        return tw.pages.ProjectViewModel("/api/projects/" + @Model.Summary.Id, @Html.ToJson(@Model));
    };
</script>
