@using Teamworks.Web.Helpers.Extensions
@model Teamworks.Web.ViewModels.Mvc.ActivityViewModelComplete


@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <ul class="breadcrumb span12">
        <li>
            <a href="@Url.RouteUrl("projects_get")">Projects</a>
            <span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.RouteUrl("projects_details", new {projectId = Model.ProjectReference.Id})">@Model.ProjectReference.Name</a>
            <span class="divider">/</span>
        </li>
        <li>
            <a href="@Url.RouteUrl("projects_details", new {projectId = Model.ProjectReference.Id})">Activities</a>
            <span class="divider">/</span>
        </li>
        <li>
            <span>@Model.Name</span>
        </li>
    </ul>
</div>
<div class="row">
    <div class="span8">
        <header class="page-header">
            <h1 class="well well-mini" data-bind="css: { well: editing_state(), 'well-mini': editing_state()}">
                <span class="hide" data-bind="text: name, css: { hide: editing_state() }">@Model.Name</span>
                <small class="hide" data-bind="css: { hide: editing_state() }">
                    <span data-bind="text: description, visible: description">
                        @Model.Description
                    </span>
                </small>
                <input id="activity_name" name="activity_name" class="span3 hide" autofocus="autofocus" placeholder="Activity name" data-bind="css: { hide: !editing_state() }, value: name, valueUpdate: 'afterkeyup'" />
                <input id="activity_description" name="activity_description" class="span4 hide" autofocus="autofocus" placeholder="Activity description" data-bind="css: { hide: !editing_state() }, value: description, valueUpdate: 'afterkeyup'" />
                <a class="hide" data-bind="css: { hide: editing_state()}, click: function() { editing_state(true); }">
                    <i class="icon-edit"></i> 
                </a>
                <a class="hide" data-bind="css: { hide: !editing_state() }, click: function() { editing_state(false); _update(); }">
                    <i class="icon-save"></i> 
                </a> 
                &nbsp;
                <a class="hide" data-bind="css: { hide: !editing_state() }, click: function() { discardChanges(); editing_state(false); }">
                    <i class="icon-remove"></i> 
                </a>
            </h1>
        </header>

        <div class="well well-mini" data-bind="css: { well: editing_state(), 'well-mini': editing_state()}">
            <header class="lead">Status</header>
            <div class="row">
                <div class="span4">
                    <div>
                        <strong>Start:</strong> <span data-bind="text: startDate.formatted"></span>
                        <a class="hide" data-bind="datepicker: startDate.formatted, css: { hide: !editing_state() }" data-date-autoclose="true" data-date-format="dd/MM/yyyy" data-date-enddate="@DateTime.Today.ToString("dd/MM/yyyy")"><i class="icon-calendar"></i></a>
                    </div>
                    <div>
                        <strong>Duration:</strong> <span class="hide" data-bind="css: { hide: editing_state()}, text: duration"></span>
                        <div class="hide well well-mini"  data-bind="css: { hide: !editing_state(), 'show-inline': editing_state() }">
                            <form class="form-inline modal-form" data-bind="submit: _update">
                                <input id="activity_duration" name="activity_duration" class="input-xxsmall" autofocus="autofocus" placeholder="Activity duration" data-bind="value: duration, valueUpdate: 'afterkeyup'" />
                            </form>
                        </div>
                    </div>
                </div>
                <div class="span3">
                    <div><strong>Total logged time:</strong> <span data-bind="text: totalTimeLogged"></span> <span data-bind="text: '(' + completionPercent() +'%)'"></span></div>
                </div>
            </div>
        </div>

        <div>
            <header class="lead">Time log for this activity.</header>
    
            <table class="table table-striped table-bordered table-condensed">
                <thead>
                    <tr>
                        <th>Duration</th>
                        <th>Description</th>
                        <th>Date</th>
                        <th>Person</th>
                        <th class="input-small">Edit</th>
                    </tr>
                </thead>
                <tbody data-bind="template: { name: 'timelog-template', foreach: timelogs }">
                </tbody>
            </table>
            <script type="text/html" id="timelog-template">
                <tr>
                    <td>
                        <span class="hide" data-bind="text: duration, css: {hide: editing()}"></span>
                        <input name="timelog_duration" class="hide input-small" data-bind="css: { hide: !editing() }, value: duration, valueUpdate: 'afterkeyup'" />
                    </td>
                    <td>
                        <span class="hide" data-bind="text: description, css: {hide: editing()}"></span>
                        <input name="timelog_description" class="hide" data-bind="css: { hide: !editing() }, value: description, valueUpdate: 'afterkeyup'" />
                    </td>
                    <td>
                        <span class="hide" data-bind="text: date.formatted, css: { hide: editing() }"></span>
                        <input name="timelog_date" class="hide input-small" data-bind="css: { hide: !editing() }, value: date.formatted, valueUpdate: 'afterkeyup'" />
                        <a class="hide" data-bind="datepicker: date.formatted, css: { hide: !editing() }" data-date-autoclose="true" data-date-format="dd/MM/yyyy" data-date-enddate="@DateTime.Today.ToString("dd/MM/yyyy")"><i class="icon-calendar"></i></a>
                    </td>
                    <td><a data-bind="text: person.name(), attr: { href: '@Url.RouteUrl("profiles_get")' + person.id() } "></a></td>
                    <td class="input-small">
                        <a class="hide" data-bind="css: { hide: editing()}, click: function() { editing(true); }">
                            <i class="icon-edit"></i> 
                        </a> 
                        &nbsp;
                        <a class="hide" data-bind="css: { hide: editing()}, click: function() { _remove(); }">
                            <i class="icon-trash"></i> 
                        </a>
                        <a class="hide" data-bind="css: { hide: !editing() }, click: function() { editing(false); _update(); }">
                            <i class="icon-save"></i> 
                        </a> 
                        &nbsp;
                        <a class="hide" data-bind="css: { hide: !editing() }, click: function() { $parent.discardChanges(); editing(false); }">
                            <i class="icon-remove"></i> 
                        </a>
                    </td>
                </tr>
            </script>
        </div>
    </div>
    <div class="span4">
        <h2>People</h2>
        <div class="people">
            <ul class="thumbnails" data-bind="template: { name: 'person-template', foreach: people.assigned }"></ul>
            <a href="#" class="more-options" data-bind="visible: !people.editing(), click: function() { people.editing(true); }" >More members</a>
            <div class="hide" data-bind="css: { hide: !people.editing() }">
                <form class="form-horizontal" data-bind="submit: people._add">
                    <input autocomplete="off" placeholder="Who do you wanto to add" autofocus="autofocus"
                           data-items="4" class="span2" data-bind="value: people.input, valueUpdate: 'afterkeyup', typeahead: people.typeahead" />
                    <a class="btn-mini" data-bind="click: function() { people.editing(false) }"><i class="icon-remove"></i></a> 
                </form>
            </div>
        </div>
        
        <script type="text/html" id="person-template">
            <li class="dropdown">
                <a class="thumbnail dropdown-toggle" data-toggle="dropdown" rel="tooltip-top" data-bind="attr: { href: '#', 'title': name }">
                    <img data-bind="attr: { src: gravatar }" />
                </a>               
                <div class="dropdown-menu well-small">
                    <img class="pull-left" data-bind="attr: { alt: name, src: gravatar }" />
                    <div>
                        <h3 class="lead">
                            <a data-bind="text: name, attr: { href: '@Url.RouteUrl("profiles_get")' + id() }" href="#"></a>
                        </h3>
                        <div data-bind="text: username"></div>
                    </div>
                    <a class="btn pull-right pull-down clear" href="#" data-bind="click: _remove">Remove</a>
                </div>
            </li>
        </script>

        <h2>Related Activities
            <a class="hide" data-bind="css: { hide:  editing_dependencies() }, click: function() { editing_dependencies(true); }">
                <i class="icon-edit"></i> 
            </a>
            <a class="hide" data-bind="css: { hide: !editing_dependencies() }, click: function() { editing_dependencies(false); _update(); }">
                <i class="icon-save"></i> 
            </a> 
            &nbsp;
            <a class="hide" data-bind="css: { hide: !editing_dependencies() }, click: function() { discardChanges(); editing_dependencies(false); }">
                <i class="icon-remove"></i> 
            </a>
        </h2>

        <div class="hide" data-bind="css: { hide: dependencies.length==0 }">No dependencies.</div>
        <ul class="unstyled well" data-bind="css: { well: editing_dependencies() }, template: { name:'depedency-template', foreach: dependencies }"></ul>
        <script type="text/html" id="depedency-template">
            <li class="hide" data-bind="{ css: { hide: (!($parent.editing_dependencies()) && !dependency()) } }" >
                <input class="clear pull-right" type="checkbox"
                       data-bind="enable: ($parent.editing_dependencies()), ttr: {id: 'chk'+id(), name:'chk'+id()}, checked: dependency, click: function(e){ $parent.dependenciesChanged(true); return true; } " >
                <strong data-bind="text: name"></strong>, <small data-bind="text: description"></small>
                <span>(Start: <small data-bind="text: startDate.formatted"></small>, Duration: <small data-bind="text: duration"></small>)</span>
            </li>
        </script>  
    </div>
</div>

<script>
    var viewmodel = function() {
        return tw.pages.ActivityViewModel('/projects/@Model.ProjectReference.Id/activities', @Html.ToJson(Model));
    }
</script>

<section>
    <h1>Results</h1>
    <pre>
    @ViewsExtensions.ToIndentedJson(Html, ViewBag.Results)
</pre>
</section>