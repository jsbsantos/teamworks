@using Teamworks.Web.Views
@model Teamworks.Web.ViewModels.Mvc.RegisterTimelogsViewModel

@{
    ViewBag.Title = "Timelogs";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-header">
    <h1>Timelogs <small>On this page you can register where you spent or time and see your past entries for all projects and activities.</small></h1>    
</div>

@if (Model.Options.Count == 0)
{
    <p class="tc well">To register time you need to have a project. You can start in the <a href="@Url.RouteUrl("projects_get")">projects</a> page.</p>
}
else
{
    <div class="row">
        <div class="span4">
            <div class="tabbable tabs-left">
                <ul class="nav nav-tabs" data-bind="foreach: tabs">
                    <li data-bind="css: {active: $parent.selected() === $data }">
                        <a href="#" data-bind="click: $parent._select, text: description">Today</a>
                    </li>
                </ul>
        
                <div class="tab-content">
                    <form class="form-horizontal" data-bind="submit: timelogs._create">
              
                        <p> The registration will be made for day <strong class="highlight" data-bind="text: timelogs.input.date.formatted, highlight: 'alert alert-info'"></strong>. 
                            <a class="hide" data-bind="datepicker: timelogs.input.date.formatted, css: { hide: selected().calendar === false }" data-date-autoclose="true" data-date-format="dd/MM/yyyy" data-date-enddate="@DateTime.Today.ToString("dd/MM/yyyy")"><i class="icon-calendar"></i></a>
                        </p>
                        <div class="control-group" >
                            <input id="project_name" autofocus="autofocus" name="project_name" placeholder="Project name, Activity name" data-bind="typeahead: typeahead" />
                        </div>
                        <div class="control-group">
                            <input name="description" placeholder="Description" data-bind="value: timelogs.input.description, valueUpdate: 'afterkeyup'" />
                        </div>
                        <div class="control-group">
                            <input name="duration" placeholder="20min" data-bind="value: timelogs.input.duration, valueUpdate: 'afterkeyup'" />
                        </div>
                        <div>
                            <button class="btn btn-large btn-success" type="submit">Register</button>
                        </div>
         
                    </form>
                </div>
            </div>
        </div>
        <div class="span8">
            <header class="lead">
                <h2>Your time <small>Where you spent your days</small></h2>
            </header>
            <div class="hide" data-bind="css: { 'hide': timelogs.length }">
                <p class="alert">Register your first hours and they will appear here.</p>

            </div>
            <table class="table table-striped table-bordered table-condensed hide" data-bind="css: { 'hide': !timelogs.length }">
                <thead>
                    <tr>
                        <th>Project, Activity</th>
                        <th>Duration</th>
                        <th>Description</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody data-bind="template: { name: 'timelog-template', foreach: timelogs }">
                </tbody>
            </table>
            <script type="text/html" id="timelog-template">
                <tr>
                    <td>
                        <strong data-bind="text: project.name"></strong>, <span data-bind="text: activity.name"></span>
                    </td>
                    <td data-bind="text: duration"></td>
                    <td data-bind="text: description"></td>
                    <td data-bind="text: date.formatted"></td>
                </tr>
            </script>
        </div>
    </div>




    <script>
        var viewmodel = function() {
            return new tw.pages.RegisterTimelogsViewModel(@Html.ToJson(Model.Options), @Html.ToJson(Model.Timelogs));
    };
</script>
}